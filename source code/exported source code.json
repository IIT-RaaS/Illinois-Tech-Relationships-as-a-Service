{"files":[{"id":"36265a8c-3deb-4c08-917c-0b4b171a2581","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Chicago\",\n  \"dependencies\": {\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"19a14d19-f75a-4009-900d-d3f0db5a55b0","name":"Matching Form","type":"server_js","source":"function generateForm(id, name, types) { \n  var title \u003d \"Illinois Tech RaaS Matching Form for \" + name;\n  var description \u003d \"The link to this form has been uniquely generated to match your interests \"\n      +\"as specified in the sign-up form. PLEASE DO NOT SHARE THE LINK TO THIS FORM WITH ANYONE\\n\\n\"\n      +\"Check back regularly! This form will show a maximum of five potential candidates who are \"\n      +\"interested in relationships with matching criteria. It will be updated with additional \"\n      +\"potential candidates as you fill it out and as more people sign up.\"\n  var form \u003d FormApp.create(title)  \n      .setTitle(title)\n      .setDescription(description)\n      .setConfirmationMessage(\"Your likes and dislikes have been submitted and are being processed. \"\n          +\"Start another submission to view more candidates.\\n\\nPlease note that it may take a few seconds \"\n          +\"to finish processing your submission, and you will not have access to the form during that time.\");\n\n  var forms_folder \u003d DriveApp.getFolderById(folder_id); // id obtained using getFolderIdHelper()\n  var user_folder \u003d forms_folder.createFolder(id);\n  DriveApp.getFileById(form.getId()).moveTo(user_folder);\n  \n  modifyForm(form, types);\n  createFormTrigger(form, \"onFormSubmit\");\n  \n  return [user_folder, form];\n}\n\nfunction modifyForm(form, types) {\n  // clear form\n  var items \u003d form.getItems();\n  while (items.length \u003e 0)\n    form.deleteItem(items.pop());\n\n  var title \u003d \"To protect your anonymity, fake \\\"sign-ups\\\" have been included by the developers. THE \"\n      +\"INFORMATION YOU SEE IN THE BIOGRAPHIES IS NOT NECESSARILY ACCURATE, but will be for anyone \"\n      +\"you match with. Read more about this below.\"\n  var description \u003d \"To ensure that those who sign up for this service remain anonymous to other users, \"\n      +\"we have included dummy information for people who have directly stated that they do not intend \"\n      +\"to make use of this service and consented to our creating fake accounts with their information. \"\n      +\"This includes a fake biography for each of those people. However, you can only match with people \"\n      +\"who have signed up for the service, and any biography you read for them is one they have written \"\n      +\"themselves. Therefore, your seeing a biography in this form does not necessarily mean it \"\n      +\"represents the views of the person named. This provides users the freedom to express their true \"\n      +\"beliefs in biographies without fear of being condemned by their fellow peers.\"\n  form.addSectionHeaderItem()\n      .setTitle(title)\n      .setHelpText(description);\n  \n  // checks if there are no candidates\n  if (candidates.length \u003d\u003d 0) {\n    addNoCandidatesBlock(form);\n    return form.getId();\n  }\n  \n  var i \u003d 0\n  for (info of candidates) {\n    if (i \u003d\u003d 5) // this is to ensure we only show a max of 5 candidates at a time\n      break;\n\n    title \u003d info[0];\n    description \u003d \"Gender: \"+info[1]+\"\\n\\n\"\n        +\"Link to Social Media/Photos: \"+info[2]+\"\\n\\n\"\n        +\"Biography: \"+info[3];\n    form.addPageBreakItem()\n        .setTitle(title)\n        .setHelpText(description);\n    \n    title \u003d \"\\\"Like\\\" or \\\"Dislike\\\" \"+info[0]+\" for each of the following relationship types\";\n    description \u003d \"A \\\"like\\\" indicates that you would engage in this type of relationship with \"+info[0]+\", \"\n        +\"whereas a \\\"dislike\\\" indicates you would not.\";\n    form.addGridItem()\n        .setTitle(title)\n        .setHelpText(description)\n        .setRows(types)\n        .setColumns([\"Like\", \"Dislike\"]);\n        // .setRequired(true);\n    \n    /*  deprecated\n    title \u003d \"I am submitting my likes and dislikes for \"+name;\n    description \u003d \"If you select \\\"Yes\\\", your likes/dislikes will be submitted for a potential match. \"\n        +\"You will not be able to change your answer choices, and \"+name+\" will no longer appear on this \"\n        +\"form. If you select \\\"No\\\", your likes/dislikes will not be submitted nor will they be saved, and \"\n        +name+\" will continue to appear on this form until you select \\\"Yes\\\".\"\n    form.addMultipleChoiceItem()\n        .setTitle(title)\n        .setHelpText(description)\n        .setChoiceValues([\"Yes\", \"No\"])\n        .setRequired(true);\n    */\n    \n    i++;\n  }\n\n  // for (var i \u003d 0; i \u003c pages.length-1; i++)\n  //   pages[i].setGoToPage(pages[i+1]);\n  // pages[pages.length-1].setGoToPage(FormApp.PageNavigationType.SUBMIT);\n  \n  return form;\n}\n\nfunction addNoCandidatesBlock(form) {\n  title \u003d \"You have no potential matches at this time. Please check this form again later.\";\n  description \u003d \"You will also be notified via the email you specified during sign-up when potential matches appear.\";\n  form.addSectionHeaderItem()\n      .setTitle(title)\n      .setHelpText(description);\n}\n\n/* the following are only for testing */\n\nfunction generateFormTester() {\n  // TODO: implement user, confirm, types, candidates\n  console.log(generateForm(user, confirm, types, candidates));\n}\n\nfunction modifyFormTester() {\n  // TODO: implement types, candidates\n  var id \u003d \"1d83HZWjTzdBGQf8dHZhAqHRabpOEt-L7HW-rL1IBYFk\";\n  modifyForm(id, types, candidates);\n}"},{"id":"59d2c406-48a7-40b6-85e1-3b65fd21ff2c","name":"Sign Ups","type":"server_js","source":"candidates \u003d []; // temporary list of potential candidates for a user contains [[name, gender, instagram, bio], ...]\ncandidate_ids \u003d []; // temporary list of hawk ids for candidates contains [[hawk id, name], ...]\n\nfunction main() {\n  // console.log(\"Creating databases\");\n  createDatabases();\n\n  // console.log(\"Servicing new users\");\n  serviceUsers();\n  SpreadsheetApp.flush();\n\n  // console.log(\"Formatting responses\");\n  // updateFormatted();\n  // SpreadsheetApp.flush();\n\n  // console.log(\"Checking for matches\");\n  // checkMatches();\n  // SpreadsheetApp.flush();\n\n  // console.log(\"Updating all forms\");\n  // updateForms();\n}\n\nfunction serviceUsers() {\n  for (id in unserviced) {\n    var id_back \u003d id;\n    var index \u003d unserviced[id];\n    var user \u003d database[index][id];\n    var name \u003d user[0];\n    var interests \u003d user[1];\n    var types \u003d user[2];\n    var email \u003d user[5];\n\n    var gender \u003d \"Male\";\n    if (index \u003d\u003d 1) gender \u003d \"Female\";\n    if (index \u003d\u003d 2) gender \u003d \"Nonbinary/Other\";\n\n    // console.log(\"User: \" + name);\n    addCandidates(id, interests, gender, types);\n    var [folder, form] \u003d generateForm(id, name, types); // returns [user folder id, form id]\n\n    // for some reason, the following function changes the value of id, not sure why\n    // this may be a bug in apps script\n    // that\u0027s why I made a backup id_back for use in updateServiceIds\n    var [formatted, candidates] \u003d createSpreadsheets(folder, id, name, types);\n    updateServicedIds(id_back, form, formatted, candidates);\n\n    sendWelcomeEmail(email, form);\n  }\n}\n\nfunction addCandidates(id, interests, gender, types) {\n  candidates \u003d [];\n  candidate_ids \u003d [];\n\n  if (interests.includes(\"Male\"))\n    addCandidatesHelper(database[0], \"Male\", id, gender, types);\n  \n  if (interests.includes(\"Female\"))\n    addCandidatesHelper(database[1], \"Female\", id, gender, types);\n  \n  if (interests.includes(\"Nonbinary/Other\"))\n    addCandidatesHelper(database[2], \"Nonbinary/Other\", id, gender, types);\n  \n  // printCandidates();\n  // printCandidateIds();\n}\n\nfunction addCandidatesHelper(users, other_gender, this_id, this_gender, this_types) {\n  for (other_id in users) {\n    var other \u003d users[other_id];\n    var other_name \u003d other[0];\n    var other_interests \u003d other[1];\n    var other_types \u003d other[2];\n    var other_link \u003d other[3];\n    var other_bio \u003d other[4];\n    \n    if (other_id \u003d\u003d this_id)\n      continue;\n    \n    if (other_interests.includes(this_gender))  // if looking for each other\u0027s genders\n      this_types.every(function(this_type) {\n        if (other_types.includes(this_type)) {\n          candidates.push([other_name, other_gender, other_link, other_bio]);\n          candidate_ids.push([other_id, other_name]);\n          return false; // if matching relationship type, add to candidates and exit\n        }\n\n        return true;  // otherwise, check next relationship type\n      });\n  }\n}\n\nfunction createSpreadsheets(folder, id, name, types) {\n  var formatted \u003d SpreadsheetApp.create(name+\"\u0027s Responses\");\n  var candidates \u003d SpreadsheetApp.create(name+\"\u0027s Candidates\");\n  DriveApp.getFileById(formatted.getId()).moveTo(folder);\n  DriveApp.getFileById(candidates.getId()).moveTo(folder);\n\n  updateCandidatesSpreadsheets(formatted, candidates, [id, name], types);\n  return [formatted, candidates];\n}\n\nfunction updateCandidatesSpreadsheets(formatted, candidates, candidate, types) {\n  updateNewUserCandidates(formatted, candidates, types);\n  updateExistingUserCandidates(candidate);\n}\n\nfunction updateNewUserCandidates(formatted, candidates, types) {\n  candidate_ids.forEach(function(id) {\n    candidates.appendRow(id);\n  });\n\n  createFormatted(formatted);\n}\n\nfunction updateExistingUserCandidates(candidate) {\n  // candidate_ids contains [hawk id, name] but we want list of only hawk ids\n  var ids_only \u003d [];\n  candidate_ids.forEach(function(id) {\n    ids_only.push(id[0]);\n  });\n\n  for (id in serviced)\n    if (ids_only.includes(id)) {\n      var form \u003d FormApp.openById(serviced[id][0]);\n      var candidates \u003d SpreadsheetApp.openById(serviced[id][2]);\n      candidates.appendRow(candidate);\n\n      var [_, _, types, _, _, email, _, _] \u003d searchDatabase(id);\n      updateForm(form, candidates, types);\n      sendNewCandidatesEmail(email, form);\n    }\n}\n\nfunction updateServicedIds(id, form, formatted, candidates) {\n  var sheet \u003d SpreadsheetApp.openById(serviced_id); // id obtained using getSpreadsheetIdHelper()\n  var data \u003d sheet.getDataRange().getValues();\n\n  var index \u003d 0;\n  for (var i \u003d 0; i \u003c data.length; i++)\n    if (data[i][0] \u003d\u003d id) {\n      index \u003d i+1;\n      break;\n    }\n\n  sheet.getActiveSheet().getRange(index, 2).setValue(form.getId());\n  sheet.getActiveSheet().getRange(index, 3).setValue(formatted.getId());\n  sheet.getActiveSheet().getRange(index, 4).setValue(candidates.getId());\n}\n\n/* the following are only for testing */\n\nfunction printCandidates() {\n  var string \u003d \"Candidates\";\n  for (candidate of candidates)\n    string +\u003d \"\\nName: \"+candidate[0]+\"\\n\"\n        +\"Gender: \"+candidate[1]+\"\\n\"\n        +\"Link: \"+candidate[2]+\"\\n\"\n        +\"Bio: \"+candidate[3]+\"\\n\";\n  \n  console.log(string);\n}\n\nfunction printCandidateIds() {\n  var string \u003d \"Candidate Ids\";\n  candidate_ids.forEach(function([id, name]) {\n    string +\u003d \"\\nName: \"+name+\"\\n\"\n        +\"Hawk Email: \"+id+\"\\n\"\n  });\n\n  console.log(string);\n}"},{"id":"daf67f58-444d-4508-a86e-d9074b18526c","name":"Responses Formatting","type":"server_js","source":"function createFormatted(formatted) {\n  // if matched exists, sheets and headers were already created, so return\n  var matched \u003d formatted.getSheetByName(\"Matched\");\n  if (matched !\u003d null)\n    return;\n\n  formatted.getActiveSheet().setName(\"Unmatched\");\n  \n  matched \u003d formatted.insertSheet();\n  matched.setName(\"Matched\");\n\n  var rejected \u003d formatted.insertSheet();\n  rejected.setName(\"Rejected\");\n\n  var unmatched \u003d formatted.getSheetByName(\"Unmatched\");\n  createHeaders(unmatched, matched, rejected);\n}\n\nfunction createHeaders(unmatched, matched, rejected) {\n  unmatched.setFrozenRows(1);\n  var values \u003d [[\"ID\", \"Name\", \"Fw/oB\", \"FwB\", \"Dw/oS\", \"DwS\"]];\n  var range \u003d unmatched.getRange(\"A1:F1\");\n  range.setValues(values);\n\n  matched.setFrozenRows(1);\n  values \u003d [[\"ID\", \"Name\", \"Fw/oB\", \"FwB\", \"Dw/oS\", \"DwS\", \"Criteria\"]];\n  range \u003d matched.getRange(\"A1:G1\");\n  range.setValues(values);\n\n  rejected.setFrozenRows(1);\n  values \u003d [[\"ID\", \"Name\", \"Fw/oB\", \"FwB\", \"Dw/oS\", \"DwS\"]];\n  range \u003d rejected.getRange(\"A1:F1\");\n  range.setValues(values);\n}\n\nfunction formatResponse(response, formatted, candidates) {\n  var data \u003d candidates.getDataRange().getValues();\n  var unmatched \u003d formatted.getSheetByName(\"Unmatched\");\n  var rm \u003d [];\n\n  var items \u003d response.getItemResponses();\n  for (var i \u003d 0; i \u003c items.length; i++) {\n    var item \u003d items[i];\n    \n    var id_name \u003d data[i];\n    var headers \u003d item.getItem().asGridItem().getRows();\n    var r \u003d item.getResponse();\n\n    if (r.includes(null))\n      continue;\n    \n    console.log(\"%s with headers %s and responses %s\", id_name, headers, r);\n    \n    addRow(id_name, headers, r, unmatched);\n    rm.push(i+1);\n  }\n\n  // we only remove at the end so it\u0027s easy to access candidate name by index before\n  removeCandidates(rm, candidates);\n}\n\nfunction addRow(id_name, headers, r, unmatched) {\n  unmatched.appendRow(id_name);\n\n  for (var i \u003d 0; i \u003c r.length; i++) {\n    var index \u003d 6;\n    if (headers[i].includes(\"Friendships without Benefits\"))\n      index \u003d 3;\n    else if (headers[i].includes(\"Friendships with Benefits\"))\n      index \u003d 4;\n    else if (headers[i].includes(\"Relationships without Sex\"))\n      index \u003d 5;\n    \n    unmatched.getRange(unmatched.getLastRow(), index).setValue(r[i]);\n  }\n}\n\nfunction removeCandidates(rm, candidates) {\n  rm.reverse().forEach(function(index) {\n    candidates.deleteRow(index);\n  });\n}"},{"id":"54196343-2cf9-4e8e-b3f9-75efad92f849","name":"Match Checker","type":"server_js","source":"function processFormatted(formatted, this_id) {\n  rm \u003d [];\n\n  var data \u003d formatted.getSheetByName(\"Unmatched\").getDataRange().getValues();\n  for (var i \u003d 1; i \u003c data.length; i++) {\n    var row \u003d data[i];\n    var other_id \u003d row[0];\n\n    var other_formatted \u003d getSheetFromId(other_id);\n    if (checkMatch(this_id, row, formatted, other_formatted))\n      rm.push(i+1);\n  }\n\n  // we only remove from this spreadsheet at the end so loop continues properly before\n  removeUnmatched(rm, formatted);\n}\n\nfunction getSheetFromId(id) {\n  var forms_folder \u003d DriveApp.getFolderById(folder_id); // id obtained using getFolderIdHelper()\n  var user_folder \u003d forms_folder.getFoldersByName(id).next();\n  var file \u003d user_folder.searchFiles(\"title contains \u0027Responses\u0027\").next();\n  \n  return SpreadsheetApp.open(file);\n}\n\nfunction checkMatch(id, this_row, this_formatted, other_formatted) {\n  var data \u003d other_formatted.getSheetByName(\"Unmatched\").getDataRange().getValues();\n\n  for (var i \u003d 1; i \u003c data.length; i++) {\n    var other_row \u003d data[i];\n    if (other_row[0] !\u003d id)\n      continue;\n    \n    // console.log(\"Process match for \"+this_row[0]+\" and \"+other_row[0]);\n    processMatch(this_row, other_row, i+1, this_formatted, other_formatted);\n    return true;\n  }\n\n  return false;\n}\n\nfunction processMatch(this_row, other_row, other_index, this_formatted, other_formatted) {\n  var available_types \u003d [\"Friendships without Benefits\", \"Hookups or Friendships with Benefits\",\n      \"Serious Relationships without Sex\", \"Serious Relationships with Sex\"];\n  var types \u003d [];\n\n  var match \u003d false;\n  console.log(\"This row: \" + this_row);\n  console.log(\"Other row: \" + other_row);\n  for (var i \u003d 2; i \u003c 6; i++)\n    if (this_row[i] \u003d\u003d \"Like\" \u0026\u0026 other_row[i] \u003d\u003d \"Like\") {\n      types.push(available_types[i-2]);\n      match \u003d true;\n    }\n  \n  console.log(\"Match? \" + match);\n  console.log(\"Criteria: \" + types)\n  \n  if (match) {\n    var types_string \u003d types.join(\", \");\n    this_row.push(types_string);\n    other_row.push(types_string);\n\n    this_formatted.getSheetByName(\"Matched\").appendRow(this_row);\n    other_formatted.getSheetByName(\"Matched\").appendRow(other_row);\n\n    emailMatch(this_row[0], other_row[0], types_string);\n  } else {\n    this_formatted.getSheetByName(\"Rejected\").appendRow(this_row);\n    other_formatted.getSheetByName(\"Rejected\").appendRow(other_row);\n  }\n\n  other_formatted.getSheetByName(\"Unmatched\").deleteRow(other_index);\n  return match;\n}\n\nfunction removeUnmatched(rm, formatted) {\n  var unmatched \u003d formatted.getSheetByName(\"Unmatched\");\n\n  rm.reverse().forEach(function(index) {\n    unmatched.deleteRow(index);\n  });\n}\n\nfunction emailMatch(this_id, other_id, types) {\n  var [_, _, _, _, _, this_email, this_discord, _] \u003d searchDatabase(this_id);\n  var [_, _, _, _, _, other_email, other_discord, _] \u003d searchDatabase(other_id);\n\n  sendMatchEmail(this_email, types, other_discord);\n  sendMatchEmail(other_email, types, this_discord);\n}"},{"id":"8dc8d970-84bc-4a0d-b482-94118c35d61a","name":"Form Update","type":"server_js","source":"function updateForm(form, candidates_sheet, types) {\n  candidates \u003d [];\n\n  var data \u003d candidates_sheet.getDataRange().getValues();\n  if (data !\u003d \"\")\n    data.forEach(function(candidate) {\n      var id \u003d candidate[0];\n      var [name, _, _, link, bio, _, _, gender] \u003d searchDatabase(id);\n      candidates.push([name, gender, link, bio]);\n    });\n  \n  // form.deleteAllResponses();\n  modifyForm(form, types);\n}\n\n/* the following are only for testing */\n\nfunction updateFormsTester() {\n  createDatabases();\n  updateForms();\n}"},{"id":"33a3c17a-62e9-4c27-b6e3-56f03c4f73bb","name":"Emails","type":"server_js","source":"var banner \u003d \"\\n\\nYours Truly,\\n\\tIllinois Tech Relationships as a Service\"\n    +\"\\n\\nThank you for using Illinois Tech Relationships as a Service (RaaS). \"\n    +\"To read more information about the service and how it works, click here. \"\n    +\"Feel free to reach out to us on Instagram @iit.relationships or email us \"\n    +\"at iitrelationships@gmail.com with any questions or concerns.\\n\\n\"\n    +\"This is an automated email generated via Google apps script. Please do not reply. \"\n    +\"If you are no longer interested in this service, email \"\n    +\"iitrelationships@gmail.com to unsubscribe.\";\nvar options \u003d {\n    \"from\": \"iitrelationships@gmail.com\",\n    \"name\": \"IIT RaaS\"\n  };\n\nfunction sendWelcomeEmail(email, form) {\n  // console.log(\"Sending welcome email to \"+email+\" with form id \"+form.getId());\n\n  var url \u003d form.getPublishedUrl();\n\n  var subject \u003d \"Welcome to RaaS\";\n  var body \u003d \"Welcome to Illinois Institute of Technology Relationships as a Service (RaaS)!\\n\\n\"\n      +\"Submit all your “likes” and “dislikes” for potential relationship candidates through the \"\n      +\"following form: \"+url+\"\\n\"\n      +\"This form will be updated as more candidates appear.\";\n  sendEmail(email, subject, body);\n}\n\nfunction sendConfirmErrorEmail(email) {\n  // we\u0027ll be running this off of an account in the iit domain\n  // so we can restrict form responses to iit users \u003d\u003e this function is unnecessary\n  // it\u0027s a remnant of older implementation\n  // and a failsafe in case OTS gets mad at me for using my hawk account (which they shouldn\u0027t)\n  // TODO: implement\n}\n\nfunction sendNewCandidatesEmail(email, form) {\n  // console.log(\"Sending new candidates email to \"+email+\" with form id \"+form.getId());\n\n  var url \u003d form.getPublishedUrl();\n\n  var subject \u003d \"New Potential Matches\";\n  var body \u003d \"You have new relationship candidates awaiting your approval! \"\n      +\"To view them, open your designated form. As a reminder, your unique \"\n      +\"link for submitting your “likes” and “dislikes” is \"+url;\n  sendEmail(email, subject, body);\n}\n\nfunction sendMatchEmail(email, types, discord) {\n  // console.log(\"Emailing \"+email+\" discord link \"+discord+\" and types \"+types);\n\n  var subject \u003d \"You Have a Match!\";\n  var body \u003d \"Congratulations, you have a match!\\n\\n\"\n      +\"You matched with someone for the following criteria: \"+types+\".\\n\\n\"\n      +\"Message your match on discord at https://discordapp.com/users/\"+encodeURI(discord)+\"/ or friend request Discord tag \"+discord;\n  sendEmail(email, subject, body);\n}\n\nfunction sendEmail(email, subject, body) {\n  GmailApp.sendEmail(email, subject, body+banner, options);\n}"},{"id":"e0bad638-7fed-4221-a0fd-4e136ab3d787","name":"Databases","type":"server_js","source":"var database \u003d []; // user database contains [male data, female data, nonbinary/other data]\n                   // each of male/female/nonbinary data contains {hawk id: [name, interests, types, link, bio, personal email, discord], ...}\n\nvar serviced \u003d {}; // already serviced users (with forms) contains {hawk id: [form id, candidates spreadsheet id], ...}\nvar unserviced \u003d {}; // users to be serviced (without forms) contains {hawk id: database index, ...}\n\nfunction createUserDatabase() {\n  var sheet \u003d SpreadsheetApp.openById(\"1CqrQW3KBCAJPln5a37iSzlJQ-khpBClg2maJJ4jwuds\"); // id of responses sheet obtained using getSpreadsheetIdHelper()\n  var data \u003d sheet.getDataRange().getValues();\n\n  prepareUserDatabase();\n\n  for (var i \u003d 1; i \u003c data.length; i++) {\n    var row \u003d data[i];\n    var id \u003d row[1];   // hawk email to confirm\n    var name \u003d row[2];      // name of user\n    var email \u003d row[3];     // personal email\n    var gender \u003d row[4];    // gender of user\n    var interests \u003d row[5]; // gender(s) user is interested in being in a relationship with\n    var types \u003d row[6].split(\", \"); // type(s) of relationships user is interested in as a list\n    var link \u003d row[7];      // link to social media/photos\n    var bio \u003d row[8];       // bio\n    var discord \u003d row[9];   // discord\n\n    addToUserDatabase(id, name, gender, interests, types, link, bio, email, discord);\n  }\n}\n\nfunction createDatabases() {\n  var sheet1 \u003d SpreadsheetApp.openById(responses_id); // id of responses sheet obtained using getSpreadsheetIdHelper()\n  var sheet2 \u003d SpreadsheetApp.openById(serviced_id); // id of serviced users sheet obtained using getSpreadsheetIdHelper()\n  var data1 \u003d sheet1.getDataRange().getValues();\n  var data2 \u003d sheet2.getDataRange().getValues();\n\n  prepareUserDatabase();\n\n  var is_serviced \u003d true;\n  var num_serviced \u003d 0;\n\n  // gets name of last user that was serviced\n  var last_serviced \u003d \"\";\n  \n  if (data2 \u003d\u003d \"\")\n    is_serviced \u003d false;\n  else\n    last_serviced \u003d data2[data2.length-1][0];\n  \n  // console.log(\"Serviced? \"+is_serviced);\n  // console.log(\"Last serviced: \"+last_serviced);\n\n  for (var i \u003d 1; i \u003c data1.length; i++) {\n    var row \u003d data1[i];\n    var id \u003d row[1];   // hawk email to confirm\n    var name \u003d row[2];      // name of user\n    var email \u003d row[3];     // personal email\n    var gender \u003d row[4];    // gender of user\n    var interests \u003d row[5]; // gender(s) user is interested in being in a relationship with\n    var types \u003d row[6].split(\", \"); // type(s) of relationships user is interested in as a list\n    var link \u003d row[7];      // link to social media/photos\n    var bio \u003d row[8];       // bio\n    var discord \u003d row[9];   // discord\n\n    // console.log(id);\n    // console.log(name);\n    // console.log(email);\n    // console.log(gender);\n    // console.log(interests);\n    // console.log(types);\n    // console.log(link);\n    // console.log(bio);\n    // console.log(discord);\n\n    if (is_serviced) {\n      if (id \u003d\u003d last_serviced)\n        is_serviced \u003d false;\n\n      if (data2[num_serviced].length \u003d\u003d 1)\n        continue;\n\n      serviced[id] \u003d [data2[num_serviced][1], data2[num_serviced][2], data2[num_serviced++][3]];\n      // console.log(\"Added \"+id+\" with value \"+data2[num_serviced-1][1]+\"to serviced\");\n      \n      addToUserDatabase(id, name, gender, interests, types, link, bio, email, discord);\n    } else {\n      // if user hasn\u0027t been serviced before, add them to serviced spreadsheet\n      sheet2.appendRow([id]);\n      // console.log(\"Added \"+ id+\" to serviced spreadsheet\");\n\n      /*\n      // send error email message and skip if not a valid hawk account\n      if (!id.endsWith(\"iit.edu\")) {\n        sendConfirmErrorEmail(email);\n        continue;\n      }\n      */\n\n      var index \u003d addToUserDatabase(id, name, gender, interests, types, link, bio, email, discord);\n      \n      unserviced[id] \u003d index;\n      // console.log(\"Added \"+id+\" with gender index \"+index+\" to unserviced\");\n    }\n\n    // printDatabase();\n    // printServiced();\n    // printUnserviced();\n  }\n}\n\nfunction prepareUserDatabase() {\n  database[0] \u003d {};\n  database[1] \u003d {};\n  database[2] \u003d {};\n}\n\nfunction addToUserDatabase(id, name, gender, interests, types, link, bio, email, discord) {\n  var index \u003d 0;\n  if (gender \u003d\u003d \"Female\")\n    index \u003d 1;\n  else if (gender \u003d\u003d \"Nonbinary/Other\")\n    index \u003d 2;\n  \n  // console.log(\"Gender: \"+gender);\n  // console.log(\"Gender index: \"+index);\n  \n  database[index][id] \u003d [name, interests, types, link, bio, email, discord];\n  return index;\n}\n\nfunction searchDatabase(id) {\n  if (id in database[0])\n    return database[0][id].concat(\"Male\");\n  if (id in database[1])\n    return database[1][id].concat(\"Female\");\n  if (id in database[2])\n    return database[2][id].concat(\"Nonbinary/Other\");\n  \n  return [];\n}\n\n/* the following are only for testing */\n\nfunction printDatabase() {\n  var string \u003d \"User Database:\\n\\nMales\";\n  for (id in database[0])\n    string +\u003d \"\\nName: \"+database[0][id][0]+\"\\n\"\n        +\"Interests: \"+database[0][id][1]+\"\\n\"\n        +\"Types: \"+database[0][id][2]+\"\\n\"\n        +\"Link: \"+database[0][id][3]+\"\\n\"\n        +\"Bio: \"+database[0][id][4]+\"\\n\"\n        +\"Personal Email: \"+database[0][id][5]+\"\\n\"\n        +\"Discord: \"+database[0][id][6]+\"\\n\"\n        +\"Hawk Email: \"+id+\"\\n\";\n\n  string +\u003d \"\\nFemales\";\n  for (id in database[1])\n    string +\u003d \"\\nName: \"+database[1][id][0]+\"\\n\"\n        +\"Interests: \"+database[1][id][1]+\"\\n\"\n        +\"Types: \"+database[1][id][2]+\"\\n\"\n        +\"Link: \"+database[1][id][3]+\"\\n\"\n        +\"Bio: \"+database[1][id][4]+\"\\n\"\n        +\"Personal Email: \"+database[1][id][5]+\"\\n\"\n        +\"Discord: \"+database[1][id][6]+\"\\n\"\n        +\"Hawk Email: \"+id+\"\\n\";\n\n  string +\u003d \"\\nNonbinary/Other\";\n  for (id in database[2])\n    string +\u003d \"\\nName: \"+database[2][id][0]+\"\\n\"\n        +\"Interests: \"+database[2][id][1]+\"\\n\"\n        +\"Types: \"+database[2][id][2]+\"\\n\"\n        +\"Link: \"+database[2][id][3]+\"\\n\"\n        +\"Bio: \"+database[2][id][4]+\"\\n\"\n        +\"Personal Email: \"+database[2][id][5]+\"\\n\"\n        +\"Discord: \"+database[2][id][6]+\"\\n\"\n        +\"Hawk Email: \"+id;\n  \n  console.log(string);\n}\n\nfunction printServiced() {\n  var string \u003d \"Serviced\\n\";\n  for (confirm in serviced)\n    string +\u003d confirm+\": \"+serviced[confirm]+\"\\n\";\n  \n  console.log(string);\n}\n\nfunction printUnserviced() {\n  var string \u003d \"Unserviced\\n\";\n  for (confirm in unserviced)\n    string +\u003d confirm+\": \"+unserviced[confirm]+\"\\n\";\n  \n  console.log(string);\n}"},{"id":"0f8b37b2-2c9b-4e0a-b43d-5fdc4a0979eb","name":"Triggers","type":"server_js","source":"function createSignUpTrigger() {\n  var form \u003d FormApp.openById(form_id);  // id obtained using getSignUpFormIdHelper()\n  createFormTrigger(form, \"onSignUp\");\n}\n\nfunction createFormTrigger(form, func) {\n  ScriptApp.newTrigger(func)\n      .forForm(form)\n      .onFormSubmit()\n      .create();\n}\n\nfunction onSignUp(e) {\n  var len \u003d e.source.getResponses().length;\n  // apps script has a max of 20 triggers per script \u003d\u003e each user has form with trigger so max 20 users\n  // bypass by creating multiple copies of code and changing which script executes main\n  // based on number of responses\n  if (len \u003c 3) // CHANGE ME\n    main();\n}\n\nfunction onFormSubmit(e) {\n  var form \u003d e.source;\n  // block access to form until it is updated\n  form.setCustomClosedFormMessage(\"This form is currently processing a submission, checking for matches, and updating accordingly.\\n\\n\"\n      +\"This process should take up to 30 seconds. Please refresh your page.\");\n  form.setAcceptingResponses(false);\n\n  var formatted;\n  var candidates; // candidates spreadsheet not to be confused with candidates dict in sign ups\n\n  var file \u003d DriveApp.getFileById(form.getId());\n  var folder \u003d file.getParents().next();\n  var [_, formatted, candidates] \u003d getFilesInFolder(folder);\n  \n  performOperations(form, e.response, formatted, candidates, folder.getName());\n  form.setAcceptingResponses(true);\n}\n\nfunction performOperations(form, response, formatted, candidates, id) {\n  createUserDatabase();\n\n  formatResponse(response, formatted, candidates);\n  processFormatted(formatted, id);\n  SpreadsheetApp.flush();\n\n  var [_, _, types, _, _, _, _, _] \u003d searchDatabase(id);\n  updateForm(form, candidates, types);\n}"},{"id":"f39f5c2f-891e-4204-b932-483aed72e415","name":"Retrieve Folders/Files","type":"server_js","source":"var folder_id \u003d \"1H7_BqNI_zu2GbXfnNcKOunmP2etuyjl8\";\nvar form_id \u003d \"1uGBXbmh5H1XFMf7GwqvG2PS5SfhJOBGrYk7qU8RB2cA\";\nvar responses_id \u003d \"1CqrQW3KBCAJPln5a37iSzlJQ-khpBClg2maJJ4jwuds\";\nvar serviced_id \u003d \"14gJ4Ix2MSbhrfdC51MB1Rqvk-x01MNJCR_ST_CzcTDM\";\n\nfunction getFilesInFolder(folder) {\n  var form;\n  var formatted;\n  var candidates; // candidates spreadsheet not to be confused with candidates dict in sign ups\n\n  var files \u003d folder.getFiles();\n  while (files.hasNext()) {\n    var file \u003d files.next();\n\n    if (file.getName().includes(\"Matching Form\"))\n      form \u003d FormApp.openById(file.getId());\n    else if (file.getName().includes(\"Responses\"))\n      formatted \u003d SpreadsheetApp.open(file);\n    else if (file.getName().includes(\"Candidates\"))\n      candidates \u003d SpreadsheetApp.open(file);\n  }\n\n  return [form, formatted, candidates];\n}\n\n/* the following are only for testing */\n\nfunction runIdHelpers() {\n  getFolderIdHelper();\n  getSignUpFormIdHelper();\n  getSpreadsheetIdHelper();\n}\n\n// print id of matching forms folder\nfunction getFolderIdHelper() {\n  var folders \u003d DriveApp.getFoldersByName(\"Matching Forms\");\n  console.log(\"folder_id: \"+folders.next().getId());\n}\n\n// print id of sign-up form\nfunction getSignUpFormIdHelper() {\n  var folders \u003d DriveApp.getFoldersByName(\"Sign-Up Form\");\n  var folder \u003d folders.next();\n  var form \u003d folder.getFilesByName(\"Illinois Tech Relationships as a Service (RaaS) Sign-Up Form\");\n  console.log(\"form_id: \"+form.next().getId());\n}\n\n// print ids of responses sheet for sign-up form and serviced users sheet\nfunction getSpreadsheetIdHelper() {\n  var folders \u003d DriveApp.getFoldersByName(\"Sign-Up Form\");\n  var folder \u003d folders.next();\n  var sheet1 \u003d folder.getFilesByName(\"Illinois Tech Relationships as a Service (RaaS) Sign-Up Form (Responses)\");\n  console.log(\"responses_id: \"+sheet1.next().getId());\n\n  var sheet2 \u003d folder.getFilesByName(\"Serviced Users\");\n  console.log(\"serviced_id: \"+sheet2.next().getId());\n}"},{"id":"01e4811a-962f-4bfe-a916-157787d8bec2","name":"Deprecated","type":"server_js","source":"/* originally in Databases */\n\nfunction getServicedUsers() {\n  var sheet \u003d SpreadsheetApp.openById(\"14gJ4Ix2MSbhrfdC51MB1Rqvk-x01MNJCR_ST_CzcTDM\"); // id obtained using getSpreadsheetIdHelper()\n  var data \u003d sheet.getDataRange().getValues();\n\n  data.forEach(function(user) {\n    serviced.push(user[0]);\n    forms.push(user[1]);\n  });\n}\n\n/* originally in Responses Formatting */\n\nfunction clearRaw(raw, form) {\n  if (raw.getLastRow() \u003d\u003d 1) // nothing to clear\n    return;\n  \n  form.deleteAllResponses();\n\n  var sheet \u003d raw.getActiveSheet();\n  for (var i \u003d raw.getLastRow(); i \u003e\u003d 2; i--)\n    sheet.deleteRow(i);\n}\n\n/*\nfunction updateFormatted() {\n  var forms_folder \u003d DriveApp.getFolderById(\"1H7_BqNI_zu2GbXfnNcKOunmP2etuyjl8\"); // id obtained using getFolderIdHelper()\n\n  var user_folders \u003d forms_folder.getFolders();\n  while (user_folders.hasNext()) {\n    var folder \u003d user_folders.next();\n\n    var raw;\n    var formatted;\n    var candidates; // candidates spreadsheet not to be confused with candidates dict in sign ups\n    // var form;\n\n    var files \u003d folder.getFiles();\n    while (files.hasNext()) {\n      var file \u003d files.next();\n\n      if (file.getName().includes(\"Raw\"))\n        raw \u003d SpreadsheetApp.open(file);\n      else if (file.getName().includes(\"Formatted\"))\n        formatted \u003d SpreadsheetApp.open(file);\n      else if (file.getName().includes(\"Candidates\"))\n        candidates \u003d SpreadsheetApp.open(file);\n      // else if (file.getName().includes(\"Matching Form\"))\n      //   form \u003d FormApp.openById(file.getId());\n    }\n    \n    formatResponses(raw, formatted, candidates);\n    // clearRaw(raw, form);\n  }\n}\n\nfunction formatResponses(raw, formatted, candidates) {\n  createSheets(formatted);\n  copyRepsonses(raw, formatted, candidates);\n}\n*/\n\n/*\nfunction copyRepsonses(raw, formatted, candidates) {\n  var data \u003d raw.getDataRange().getValues();\n\n  var headers \u003d data[0];\n  for (var i \u003d 1; i \u003c data.length; i++) {\n    var row \u003d data[i];\n    processRow(row, headers, formatted, candidates);\n  }\n}\n\nfunction processRow(row, headers, formatted, candidates) {\n  for (var i \u003d 0; i \u003c row.length; i++) {\n    var element \u003d row[i];\n\n    if (element \u003d\u003d \"Yes\") {\n      var name \u003d headers[i].substring(42); // removes \"I am submitting my likes and dislikes for \" leaving the candidate\u0027s name\n      processElement(name, row, i-1, headers, formatted, candidates);\n    }\n  }\n}\n\nfunction processElement(name, row, i, headers, formatted, candidates) {\n  var unmatched \u003d formatted.getSheetByName(\"Unmatched\");\n\n  // copy name and id\n  var data \u003d candidates.getDataRange().getValues();\n  var id \u003d getIdFromName(name, data, headers, i, candidates);\n  unmatched.appendRow([id, name]);\n\n  // copy likes/dislikes\n  while (headers[i].includes(name)) {\n    var index \u003d 6;\n    if (headers[i].includes(\"Friendships without Benefits\"))\n      index \u003d 3;\n    else if (headers[i].includes(\"Friendships with Benefits\"))\n      index \u003d 4;\n    else if (headers[i].includes(\"Relationships without Sex\"))\n      index \u003d 5;\n    \n    unmatched.getRange(unmatched.getLastRow(), index).setValue(row[i]);\n    i--;\n  }\n}\n\n*/\n\n/* this implementation is inefficient if two candidates have the same name, but more efficient if not\n we expect two candidates having the same name to be rare */\nfunction getIdFromName(name, data, row, i, candidates) {\n  var ids \u003d [];\n\n  var index \u003d 0;\n  for (var i \u003d 0; i \u003c data.length; i++) {\n    if (data[i][1] \u003d\u003d name) {\n      ids.push(data[i][0]);\n      index \u003d i+1;\n    }\n  }\n\n  // no two people with the same name\n  if (ids.length \u003d\u003d 1) {\n    candidates.deleteRow(index);\n    return ids[0];\n  }\n  \n  /* WARNING: UNTESTED CODE */ // TODO: test\n  // check for number of previous people with same name\n  var prev \u003d 0;\n  while (i \u003e\u003d 0) {\n    while (row[i].includes(name) \u0026\u0026 !row[i].includes(\"sumbit\")) { i--; } // move past all instances of this person\n    prev++;\n    while (i \u003e\u003d 0 \u0026\u0026 !row[i].includes(name)) { i--; } // move past anyone with a different name\n  }\n\n  // get id of name with same position in candidates list\n  var id \u003d ids[0];\n  for (var i \u003d 0; i \u003c data.length; i++) {\n    if (data[i][1] \u003d\u003d name)\n      if (prev \u003e 1) prev--;\n      else {\n        id \u003d data[i][0];\n        index \u003d i+1;\n        break;\n      }\n  }\n\n  candidates.deleteRow(index);\n  return id;\n  /* END UNTESTED CODE */\n}\n\n/* originally in Match Checker */\n\nfunction checkMatches() {\n  var formatted_files \u003d DriveApp.searchFiles(\"title contains \u0027Responses\u0027\");\n\n  while (formatted_files.hasNext()) {\n    var formatted_file \u003d formatted_files.next();\n    if (formatted_file.getName().includes(\"Template\"))\n      continue;\n    \n    var folder \u003d formatted_file.getParents().next();\n    processFormatted(SpreadsheetApp.open(formatted_file), folder.getName());\n  }\n}\n\n/* originally in Form Update */\n\nfunction updateForms() {\n  var forms_folder \u003d DriveApp.getFolderById(\"1H7_BqNI_zu2GbXfnNcKOunmP2etuyjl8\"); // id obtained using getFolderIdHelper()\n\n  var user_folders \u003d forms_folder.getFolders();\n  while (user_folders.hasNext()) {\n    var folder \u003d user_folders.next();\n    var [_, _, types, _, _, _, _, _] \u003d searchDatabase(folder.getName());\n\n    var form;\n    var candidates;\n\n    var files \u003d folder.getFiles();\n    while (files.hasNext()) {\n      var file \u003d files.next();\n\n      if (file.getName().includes(\"Matching Form\"))\n        form \u003d FormApp.openById(file.getId());\n      else if (file.getName().includes(\"Candidates\"))\n        candidates \u003d SpreadsheetApp.open(file);\n    }\n    \n    updateForm(form, candidates, types);\n  }\n}"}]}